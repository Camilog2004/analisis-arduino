---
title: "trabajo2"
format: html
---

```{r}
bus <- read.csv("ENTRENAMIENTO/bus1.csv")
caminar <- read.csv("ENTRENAMIENTO/caminar1.csv")
cicla <- read.csv("ENTRENAMIENTO/cicla1.csv")
linea_o <- read.csv("ENTRENAMIENTO/lineaO1.csv")
metro1 <- read.csv("ENTRENAMIENTO/metro1.csv")
metro2 <- read.csv("ENTRENAMIENTO/metro2.csv")
metro3 <- read.csv("ENTRENAMIENTO/metro3.csv")
metro4 <- read.csv("ENTRENAMIENTO/metro4.csv")

```

```{r}
verificacación <- read.csv("VERIFICACIÓN/verificacion.csv")
linea_o
```

 

```{r}
library(tidyverse)
library(gridExtra)
library(knitr)
library(patchwork)
```

```{r}
summary(metro2)
```

```{r}
bus <- bus |>
  mutate(
    grupo_tiempo = as.POSIXct(timestamp / 1000, origin = "1970-01-01", tz = "UTC"),
    AccT = sqrt(AccX^2 + AccY^2 + AccZ^2)
  )

metro1 <- metro1 |>
  mutate(
    grupo_tiempo = as.POSIXct(timestamp / 1000, origin = "1970-01-01", tz = "UTC"),
    AccT = sqrt(AccX^2 + AccY^2 + AccZ^2)
  )


caminar <- caminar |>
  mutate(
    grupo_tiempo = as.POSIXct(timestamp / 1000, origin = "1970-01-01", tz = "UTC"),
    AccT = sqrt(AccX^2 + AccY^2 + AccZ^2)
  )

verificacación <- verificacación |>
  mutate(
    grupo_tiempo = as.POSIXct(timestamp / 1000, origin = "1970-01-01", tz = "UTC"),
    AccT = sqrt(AccX^2 + AccY^2 + AccZ^2)
  )

cicla <- cicla |>
  mutate(
    grupo_tiempo = as.POSIXct(timestamp / 1000, origin = "1970-01-01", tz = "UTC"),
    AccT = sqrt(AccX^2 + AccY^2 + AccZ^2)
  )

linea_o <- linea_o |>
  mutate(
    AccT = sqrt(AccX^2 + AccY^2 + AccZ^2)
  )

```

\

\

```{r}

```

```{r}
procesar_datos <- function(df) {
  df %>%
    # Eliminar filas donde AccX, AccY y AccZ son todos NA
    filter((!(is.na(AccX) & is.na(AccY) & is.na(AccZ))) | (!is.na(AccT))) %>%
    
    mutate(
      grupo_tiempo = as.POSIXct(floor(as.numeric(grupo_tiempo) * 40) / 40, origin = "1970-01-01"),
      AccT = sqrt(AccX^2 + AccY^2 + AccZ^2)
    ) %>%
    
    group_by(grupo_tiempo) %>%
    summarize(
      AccX = mean(AccX, na.rm = TRUE),
      AccY = mean(AccY, na.rm = TRUE),
      AccZ = mean(AccZ, na.rm = TRUE),
      AccT = mean(AccT, na.rm = TRUE),
      .groups = "drop"
    )
}
```

```{r}
bus <- procesar_datos(bus)

metro1<- procesar_datos(metro1)

caminar <-procesar_datos(caminar)

verificacación <-procesar_datos(verificacación)

cicla <- procesar_datos(cicla)
#linea_o <- procesar_datos(linea_o)
```

```{r}
#| warning: false
ggplot(metro1, aes(grupo_tiempo, AccT)) +
  geom_point(alpha = 0.3)+coord_cartesian(ylim = c(-10, 20))
```

```{r}
ggplot(bus, aes(grupo_tiempo, AccT)) +
  geom_point(alpha = 0.3)+coord_cartesian(ylim = c(-10, 20))
```

```{r}
ggplot(caminar, aes(grupo_tiempo, AccT)) +
  geom_point(alpha = 0.3)+coord_cartesian(ylim = c(-10, 20))
```

```{r}
ggplot(verificacación, aes(grupo_tiempo, AccT)) +
  geom_point(alpha = 0.3)+coord_cartesian(ylim = c(-10, 20))
```

```{r}
ggplot(linea_o, aes(timestamp, AccT)) +
  geom_point(alpha = 0.3)+coord_cartesian(ylim = c(-10, 20))
```

```{r}
ggplot(cicla, aes(grupo_tiempo, AccT)) +
  geom_point(alpha = 0.3)+coord_cartesian(ylim = c(-10, 20))
```

\

```{r}
library(e1071)
```

```{r}
curtosis <- kurtosis(linea_o$AccT, type = 2, na.rm = TRUE)

```

```{r}
hist(linea_o$AccT, breaks = 50)
boxplot(linea_o$AccT)
```

```{r}
ggplot(linea_o, aes(x = AccT)) +
  geom_histogram(bins = 50, fill = "steelblue", color = "black", na.rm = TRUE) +
  labs(title = "Histograma de AccT", x = "AccT", y = "Frecuencia") +
  theme_minimal()
```

```{r}
ggplot(bus, aes(x = AccT)) +
  geom_histogram(bins = 50, fill = "steelblue", color = "black", na.rm = TRUE) +
  labs(title = "Histograma de AccT", x = "AccT", y = "Frecuencia") +
  theme_minimal()
```

```{r}
ggplot(metro1, aes(x = AccT)) +
  geom_histogram(bins = 50, fill = "steelblue", color = "black", na.rm = TRUE) +
  labs(title = "Histograma de AccT", x = "AccT", y = "Frecuencia") +
  theme_minimal()
```

```{r}
ggplot(cicla, aes(x = AccT)) +
  geom_histogram(bins = 50, fill = "steelblue", color = "black", na.rm = TRUE) +
  labs(title = "Histograma de AccT", x = "AccT", y = "Frecuencia") +
  theme_minimal()
```

```{r}
library(dplyr)
library(e1071)  # Para kurtosis

resumen_estadisticas <- function(df, nombre) {
  df %>%
    summarise(
      Actividad = nombre,
      Media = mean(AccT, na.rm = TRUE),
      Varianza = var(AccT, na.rm = TRUE),
      Curtosis = kurtosis(AccT, type = 2, na.rm = TRUE)
    )
}

```

```{r}
# Suponiendo que ya tienes estas bases cargadas y procesadas con AccT:
res_bus <- resumen_estadisticas(bus, "Bus")
res_metro <- resumen_estadisticas(metro1, "Metro")
res_linea <- resumen_estadisticas(linea_o, "Linea O")
res_cicla <- resumen_estadisticas(cicla, "Cicla")
res_caminar <- resumen_estadisticas(caminar, "Caminar")

```

```{r}
tabla_final <- bind_rows(res_bus, res_metro, res_linea, res_cicla, res_caminar)
print(tabla_final)
```




```{r}
library(dplyr)
library(ggplot2)

# Paso 1: Calcular la diferencia absoluta de AccT
verificacación <- verificacación %>%
  arrange(grupo_tiempo) %>%
  filter(!is.na(AccT)) %>%
  mutate(
    diff_acc = c(0, abs(diff(AccT)))
  )

# Resumen de las diferencias
summary(verificacación$diff_acc)

# Paso 2: Graficar diferencias
ggplot(verificacación, aes(grupo_tiempo, diff_acc)) +
  geom_line(color = "steelblue") +
  geom_point(color = "red", size = 0.4) +
  labs(
    title = "Diferencias en la aceleración total (AccT)",
    x = "Tiempo",
    y = "Diferencia absoluta de AccT"
  ) +
  theme_minimal()

# Paso 3: Marcar cambios bruscos (posibles separaciones de trayecto)
threshold <- 20

ggplot(verificacación, aes(x = grupo_tiempo, y = diff_acc)) +
  geom_line(color = "blue", alpha = 0.4) +
  geom_point(
    data = subset(verificacación, diff_acc > threshold),
    aes(x = grupo_tiempo, y = diff_acc),
    color = "red", size = 1.5
  ) +
  labs(
    title = "Picos en la diferencia de AccT (posibles cambios de trayecto)",
    x = "Tiempo", y = "Diferencia absoluta de AccT"
  ) +
  theme_minimal()

# Obtener índices donde hay picos
picos <- which(verificacación$diff_acc > threshold)

# Calcular diferencias entre índices consecutivos
diferencias <- diff(picos)

# Umbral para separar trayectos (ajustable)
umbral_separacion <- 20

# Contar cuántas veces la diferencia entre picos consecutivos supera el umbral
cambios_reales <- sum(diferencias > umbral_separacion) + 1  # +1 porque el primero también cuenta

tiempos_picos <- verificacación$grupo_tiempo[picos]

# Calcular diferencias entre tiempos (puede ser por índice o por tiempo real)
diferencias_tiempo <- diff(tiempos_picos)

# Obtener las posiciones donde ocurre un salto mayor al umbral
posiciones_cambios <- which(diferencias_tiempo > umbral_separacion)

# Extraer los tiempos donde hay cambio real
tiempos_cambios_reales <- tiempos_picos[c(1, posiciones_cambios + 1)]  # +1 porque diff reduce en 1 la longitud

# Mostrar los tiempos
cat("Tiempos donde ocurren los cambios de trayecto:\n")
print(tiempos_cambios_reales)


```
```{r}
puntos_corte <- c(
  min(verificacación$grupo_tiempo),
  tiempos_cambios_reales,
  as.POSIXct("2025-06-05 19:50:00"),  # 🔹 Nuevo punto de corte manual
  max(verificacación$grupo_tiempo)
)

# Crear una lista para guardar cada fragmento
fragmentos <- list()

# Loop para separar por rangos de tiempo
for (i in 1:(length(puntos_corte) - 1)) {
  fragmentos[[i]] <- verificacación %>%
    filter(grupo_tiempo >= puntos_corte[i] & grupo_tiempo < puntos_corte[i + 1])
}


fragmentos[["trayecto_manual"]] <- verificacación %>%
  filter(grupo_tiempo >= as.POSIXct("2025-06-05 18:53:00") & 
         grupo_tiempo <= as.POSIXct("2025-06-05 19:47:00"))


# Nombrar cada fragmento de forma clara
names(fragmentos) <- paste0("trayecto_", seq_along(fragmentos))

# Mostrar cuántos fragmentos se crearon
cat("Fragmentos creados:", length(fragmentos), "\n")
print(names(fragmentos))

```

```{r}

for (i in seq_along(fragmentos)) {
  print(
    ggplot(fragmentos[[i]], aes(grupo_tiempo, AccT)) +
      geom_point(alpha = 0.3) +
      coord_cartesian(ylim = c(-10, 20)) +
      labs(title = paste("Trayecto", i), y = "AccT", x = "Tiempo") +
      theme_minimal()
  )
}

```

```{r}
library(e1071)  # para la función kurtosis

# Crear tabla con estadísticas para cada trayecto
resumen_trayectos <- data.frame(
  Trayecto = integer(),
  Media = numeric(),
  Varianza = numeric(),
  Curtosis = numeric()
)

indices_validos <- setdiff(seq_along(fragmentos), c(3, 4, 5, 7))

for (i in indices_validos) {
  datos <- fragmentos[[i]]$AccT
  resumen_trayectos <- rbind(
    resumen_trayectos,
    data.frame(
      Trayecto = i,
      Media = mean(datos, na.rm = TRUE),
      Varianza = var(datos, na.rm = TRUE),
      Curtosis = kurtosis(datos, na.rm = TRUE)
    )
  )
}

print(resumen_trayectos)

```
